#!/usr/bin/env node

const { execSync } = require("child_process");

console.log("üö¢ Starting complete workflow (ship)...");

// Configuration
const config = {
  functionName: "molecular-analysis",
  runtime: "nodejs20",
  region: "us-central1",
  memory: "1GB",
  timeout: "540s",
  entryPoint: "molecularAnalysis",
};

// Check for required environment variable
if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå OPENAI_API_KEY environment variable is required");
  process.exit(1);
}

try {
  // Step 1: Stage all changes
  console.log("üìù Staging all changes...");
  execSync("git add .", { stdio: "inherit" });

  // Step 2: Commit with timestamp
  const timestamp = new Date().toLocaleString();
  const commitMessage = `Auto-commit before production deployment - ${timestamp}`;
  console.log("üíæ Committing changes...");
  execSync(`git commit -m "${commitMessage}"`, { stdio: "inherit" });

  // Step 3: Run pre-deployment tests
  console.log("üß™ Running pre-deployment tests...");
  execSync("npm run test:pre-deploy", { stdio: "inherit" });

  // Step 4: Deploy to Google Cloud Functions
  console.log("‚òÅÔ∏è  Deploying to Google Cloud Functions...");

  const deployCommand = [
    "gcloud",
    "functions",
    "deploy",
    config.functionName,
    "--gen2",
    "--runtime",
    config.runtime,
    "--trigger-http",
    "--allow-unauthenticated",
    "--memory",
    config.memory,
    "--timeout",
    config.timeout,
    "--region",
    config.region,
    "--entry-point",
    config.entryPoint,
    "--source",
    ".",
    "--set-env-vars",
    `OPENAI_API_KEY=${process.env.OPENAI_API_KEY}`,
    "--quiet",
  ].join(" ");

  execSync(deployCommand, { stdio: "inherit" });

  // Step 5: Push to git repository
  console.log("üì§ Pushing to git repository...");
  execSync("git push", { stdio: "inherit" });

  console.log("‚úÖ Complete workflow successful!");
  console.log(
    `üåê Function URL: https://${config.region}-${process.env.GOOGLE_CLOUD_PROJECT || "your-project"}.cloudfunctions.net/${config.functionName}`,
  );
} catch (error) {
  console.error("‚ùå Workflow failed:", error.message);
  process.exit(1);
}
