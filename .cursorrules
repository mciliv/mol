# Cursor IDE Rules for Molecular Visualization App

keep ui stupid simple: No extraneous lines or outlining
git commit w/ message after acceptance


> **Note**: These rules are also used by `.copilot-codeGeneration-instructions.md` to ensure consistency across all AI code generation tools.

Focus on code rather than markdown. Don't overgenerate, focus on important aspects and the goal and its correctness.

## General Coding Standards

- **No Comments**: Avoid adding comments unless absolutely necessary for complex algorithms or scientific calculations
- **Modern JavaScript**: Use ES6+ features, async/await, and modern DOM APIs
- **Error Handling**: Always include proper try-catch blocks for async operations and API calls

## Frontend Development (app.js)

- **Camera API**: Always check for browser compatibility and HTTPS requirements
- **Mobile-First**: Consider mobile device constraints and touch events
- **3D Molecular Rendering**: Use $3Dmol.js library with sphere representation ONLY (NO ball-and-stick), van der Waals radii with scale factor 0.8, black background
- **User Feedback**: Provide immediate visual feedback for user interactions (loading states, click markers)
- **Progressive Enhancement**: Gracefully degrade functionality if features aren't available

## Backend Development (server.js)

- **API Design**: Use consistent JSON response format with `{ output: {...} }` structure
- **SMILES Validation**: Always validate SMILES strings before processing
- **Error Responses**: Return meaningful error messages with appropriate HTTP status codes
- **File Operations**: Use absolute paths and ensure proper file existence checks
- **Python Integration**: Handle Python subprocess errors gracefully

## Python Scripts

- **Chemical Libraries**: Use RDKit for molecular operations and structure generation
- **SMILES Processing**: Validate SMILES format before attempting to generate 3D structures
- **File Management**: Use consistent file naming conventions for SDF files
- **Error Logging**: Log both successful operations and errors with clear messages

## Molecular Data Handling

- **SMILES Format**: Only accept valid SMILES notation, reject molecular formulas like "CaCO3"
- **SDF Generation**: Always check if RDKit can parse SMILES before attempting 3D coordinate generation
- **File Paths**: Use URL-safe filenames for generated SDF files
- **Batch Processing**: Handle multiple molecules efficiently in arrays

## UI/UX Guidelines

- **Minimal Design**: No extraneous lines, borders, shadows, or outlining - keep UI stupid simple
- **Dark Theme**: Maintain consistent dark background (#000000) across 3D viewers
- **Responsive Design**: Ensure molecular viewers work on both desktop and mobile
- **Loading States**: Show clear loading indicators during AI processing and molecule generation
- **Column Layout**: Add new object columns to the right for multiple analysis results
- **Descriptive Names**: Show molecule names above 3D viewers for better context
- **Individual Controls**: Allow closing individual analysis columns with close buttons

## AI Integration

- **Vision API**: Handle OpenAI API connection errors gracefully
- **Object Identification**: Provide fallback behavior when object identification fails
- **Chemical Analysis**: Use both full image and cropped region for enhanced analysis
- **SMILES Generation**: Prefer valid SMILES over molecular formulas

## Deployment Strategy

- **Minimal Dependencies**: Prefer minimal dependencies for fast cold starts and reduced complexity
- **Google Cloud Functions**: Use GCF for serverless deployment - single function handles all routes
- **Environment Variables**: Set OPENAI_API_KEY via `gcloud functions deploy --set-env-vars`
- **Domain Configuration**: Use custom domains (like queb.space) with Cloud Functions
- **No Framework Lock-in**: Avoid platform-specific deployment frameworks - keep deployment simple

## Development Workflow

- **Live Reload**: Maintain nodemon configuration for efficient development
- **SSL Certificates**: Use existing certificates for HTTPS development
- **Debug Configuration**: Leverage VS Code's auto-attach debugging feature
- **Testing**: Ensure all chemical parsing functions are thoroughly tested

## File Organization

- **SDF Files**: Store in dedicated `sdf_files/` directory
- **Static Assets**: Keep CSS, JS, and images in root for simple serving
- **Documentation**: Maintain deployment and debugging documentation
- **Configuration**: Use environment files for API keys and sensitive data

## Performance Considerations

- **3D Rendering**: Batch molecule loading and optimize viewer initialization
- **Image Processing**: Use appropriate compression for base64 image data
- **Memory Management**: Clean up 3D viewers and streams when not needed
- **Caching**: Consider caching generated SDF files to avoid regeneration

## Error Handling Patterns

```javascript
// API calls
try {
  const response = await fetch('/api/endpoint');
  if (!response.ok) throw new Error(`HTTP ${response.status}`);
  const data = await response.json();
} catch (error) {
  console.error('Operation failed:', error);
}

// Python subprocess
try {
  const result = execSync('python script.py', { encoding: 'utf-8' });
} catch (error) {
  console.error('Python execution failed:', error.message);
}
```

## Code Style Preferences

- Use arrow functions for callbacks and event handlers
- Prefer template literals for string interpolation
- Use destructuring for object properties
- Implement proper async/await patterns
- Keep functions focused on single responsibilities
- Use meaningful variable names related to molecular concepts