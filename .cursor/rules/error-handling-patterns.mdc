# Error Handling Patterns

## API Error Handling
- Always check response status with `if (!res.ok)`
- Throw descriptive errors with HTTP status codes
- Implement proper error propagation
- Use consistent error message format
- Handle network timeouts and connection failures

## Python Subprocess Error Handling
- Wrap all `execSync` calls in try-catch blocks
- Handle Python script execution failures gracefully
- Log both successful operations and errors
- Provide meaningful error messages for debugging
- Handle file system errors and permission issues

## Input Validation
- Validate SMILES strings before processing
- Check for required fields in request bodies
- Use Zod schemas for input validation
- Handle malformed JSON and invalid data types
- Provide clear error messages for validation failures

## Camera and Media Errors
- Handle camera permission denial gracefully
- Provide fallback for unsupported browsers
- Handle HTTPS requirements for mobile devices
- Implement proper error messages for different failure modes
- Handle Safari-specific camera limitations

## AI Integration Errors
- Handle OpenAI API connection failures
- Implement proper rate limiting and timeout handling
- Provide fallback behavior for failed analysis
- Handle invalid AI response formats
- Log AI errors for debugging and monitoring

## 3D Rendering Errors
- Handle SDF file loading failures
- Validate SDF data format before rendering
- Handle empty or corrupted SDF files
- Implement proper viewer cleanup on errors
- Provide fallback for unsupported molecular structures

## User Feedback for Errors
- Show immediate error feedback to users
- Use closable error messages for non-critical errors
- Implement proper loading state management
- Provide clear instructions for error resolution
- Use consistent error styling and messaging

## Error Logging
- Log errors with appropriate detail level
- Include context information for debugging
- Avoid console.log spam in production
- Use structured logging for better analysis
- Implement proper error categorization
description:
globs:
alwaysApply: false
---
