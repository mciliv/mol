# Molecular Visualization Standards

## 3D Representation Requirements
**CRITICAL: Sphere representation ONLY - NO ball-and-stick models**

### Visualization Settings
```javascript
// In [app.js](mdc:app.js) - 3Dmol.js viewer configuration
viewer.setStyle({}, { 
  sphere: { 
    scale: 0.8  // van der Waals radii at 0.8 scale
  }
});

viewer.setBackgroundColor('#000000');  // Black background
```

### UI Philosophy
"Keep stupid simple" - minimal design with no extraneous elements:
- **No outlines** or borders around molecules
- **No ball-and-stick** representations
- **Clean sphere-only** visualization
- **Minimal UI elements** - focus on molecular structure

## SDF File Processing
- **Generate SDF files** in `sdf_files/` directory
- **Use RDKit** for 3D coordinate generation
- **Validate SMILES** before processing
- **Handle both organic** (SMILES) and **inorganic** (mineral formulas) compounds

## Molecular Data Flow
1. **AI Analysis** → SMILES strings from [AtomPredictor.js](mdc:AtomPredictor.js)
2. **SMILES Processing** → 3D structures via [molecular-processor.js](mdc:molecular-processor.js)
3. **Python Generation** → SDF files via [sdf.py](mdc:sdf.py) and [crystal.py](mdc:crystal.py)
4. **3D Rendering** → Sphere visualization via 3Dmol.js

## File Naming Conventions
- **SMILES files**: `{smiles}.sdf` (e.g., `O.sdf` for water)
- **Crystal files**: `{formula}.sdf` (e.g., `CaCO3.sdf` for calcite)
- **URL-safe filenames** for web serving

## Error Handling
- **Invalid SMILES**: Skip and log error
- **Missing SDF files**: Show error message
- **Rendering failures**: Graceful fallback
- **Empty data**: Clear user feedback

## Performance Considerations
- **Lazy loading** of 3D viewers
- **Viewer cleanup** on component removal
- **Memory management** for large molecules
- **Responsive design** for mobile devices
description:
globs:
alwaysApply: false
---
