# Auto Rule Generator - Continuous .mdc File Evolution

## ü§ñ Auto-Generation Engine

### Primary Mission:
**Transform every UI interaction, user feedback, and system decision into persistent .mdc rules**

### Generation Triggers (MANDATORY ACTIONS):

#### 1. UI Element Mentioned ‚Üí Immediate Documentation
```
TRIGGER: User mentions any UI component
ACTION: 
  1. Update meta.mdc UI Elements Registry
  2. Check if element needs dedicated .mdc file
  3. If complex ‚Üí Create dedicated rule file
  4. Document exact implementation with code snippets
  5. Cross-reference in related files
```

#### 2. Recurring Issue Detected ‚Üí Prevention Rule Creation
```
TRIGGER: Same issue mentioned 2+ times
ACTION:
  1. Create specific prevention rule in relevant .mdc
  2. Document problem + solution + prevention
  3. Add to ui-memory.mdc if UI-related
  4. Update meta.mdc with issue pattern
  5. Create auto-check in dev.mdc workflow
```

#### 3. Architectural Decision ‚Üí System Pattern Rule
```
TRIGGER: Any system design choice made
ACTION:
  1. Document in meta.mdc System Patterns
  2. Create implementation guidelines
  3. Add to dev.mdc workflow if process-related
  4. Cross-reference dependent systems
```

## üìù Rule Generation Templates

### For UI Components:
```markdown
---
title: [Component Name] Component Rules
description: Guidelines for [component purpose and behavior]
glob: "frontend/**/*.{css,html,js}"
alwaysApply: false
---

# [Component Name] - Implementation Rules

## Requirements
[Exact specifications from user feedback]

## Implementation
[Code snippets with CSS/HTML/JS]

## User Feedback History
[Chronological list of user comments and fixes]

## Prevention Rules
[Specific rules to prevent recurring issues]
```

### For System Patterns:
```markdown
---
title: [Pattern Name] System Pattern
description: Implementation pattern for [system area]
glob: "[relevant file pattern]"
alwaysApply: true
---

# [Pattern Name] - System Implementation

## Pattern Description
[What this pattern accomplishes]

## Implementation Guidelines
[Step-by-step implementation]

## Integration Points
[How this connects to other systems]
```

## üîÑ Continuous Evolution Protocol

### After Every User Interaction:
1. **Scan conversation** for new UI elements, feedback, or decisions
2. **Update meta.mdc** with new information
3. **Check existing .mdc files** for related content
4. **Generate new rules** if patterns warrant dedicated files
5. **Cross-reference** all related documentation

### Weekly Maintenance:
1. **Review meta.mdc** for patterns needing dedicated files
2. **Consolidate** similar rules across multiple .mdc files
3. **Refactor** overly complex rules into simpler patterns
4. **Update metrics** in meta.mdc
5. **Sync** all cross-references

## üéØ Current Auto-Generation Queue

### Patterns Ready for Dedicated Files:
- **Payment System Rules** (complex enough for own file)
- **Camera Permission Patterns** (reusable across projects)
- **Live Reload Configuration** (system-level pattern)

### Emerging Patterns to Watch:
- Error handling patterns
- Mobile responsiveness rules
- Performance optimization guidelines
- Security patterns

## üöÄ Smart Generation Rules

### When to Create New .mdc File:
```
IF (UI element has 3+ requirements) OR
   (mentioned in 2+ conversations) OR
   (has complex implementation) OR
   (affects multiple files)
THEN ‚Üí Create dedicated .mdc file
```

### When to Update Existing File:
```
IF (related to existing .mdc content) AND
   (not complex enough for new file)
THEN ‚Üí Update existing .mdc file
```

### When to Update Meta.mdc Only:
```
IF (simple requirement) OR
   (one-time decision) OR
   (already well-documented)
THEN ‚Üí Update meta.mdc registry only
```

## üìä Generation Metrics
- **Auto-Generated Rules**: 2 (ui-memory.mdc, enhanced dev.mdc)
- **Pattern Detection Rate**: 100% (all UI feedback captured)
- **Prevention Success**: 1 (card icon spacing permanently fixed)
- **Meta Updates**: Every conversation

## üîÆ Future Auto-Generations

### Based on Current Patterns:
1. **payment-system.mdc** - Dedicated payment UI rules
2. **camera-permissions.mdc** - Camera handling patterns  
3. **mobile-responsive.mdc** - Mobile-specific UI rules
4. **error-patterns.mdc** - Error handling guidelines

### Trigger Conditions Met:
- Payment system: 5+ requirements documented
- Camera: Mentioned across multiple sessions
- Mobile: Responsive patterns emerging
- Errors: PostgreSQL + UI error patterns established

---

**This system ensures every user interaction becomes permanent knowledge, preventing AI amnesia forever.**
