# Python Patterns for Molecular App

## Chemical Processing Standards
- Use RDKit for molecular operations and structure generation
- Validate SMILES format before attempting 3D coordinate generation
- Use consistent file naming conventions for SDF files
- Log both successful operations and errors with clear messages

## File Management
- Use absolute paths for file operations
- Check file existence before processing
- Use URL-safe filenames for generated SDF files
- Implement proper error handling for file operations

## SMILES Processing
```python
from rdkit import Chem
from rdkit.Chem import AllChem

def process_smiles(smiles_string):
    mol = Chem.MolFromSmiles(smiles_string)
    if mol is None:
        raise ValueError(f"Invalid SMILES: {smiles_string}")
    
    # Generate 3D coordinates
    AllChem.EmbedMolecule(mol, randomSeed=42)
    AllChem.MMFFOptimizeMolecule(mol)
    
    return mol
```

## Mineral/Crystal Processing
- Use crystallographic data for common minerals (CaCO₃, SiO₂, Al₂O₃, etc.)
- Generate SDF files with proper atomic coordinates
- Handle both organic (SMILES) and inorganic (mineral formulas) compounds
- Implement fallback strategies for unsupported compounds

## Error Handling
```python
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    result = process_chemical(input_data)
    logger.info(f"Successfully processed: {input_data}")
except Exception as e:
    logger.error(f"Failed to process {input_data}: {str(e)}")
    raise
```

## Subprocess Integration
- Handle Python subprocess errors gracefully from Node.js
- Use consistent encoding (utf-8) for cross-platform compatibility
- Provide meaningful error messages for debugging
- Implement timeout handling for long-running operations

## Data Validation
- Always validate chemical input before processing
- Check for valid SMILES notation vs molecular formulas
- Implement proper type checking for input parameters
- Use descriptive variable names related to chemical concepts
description:
globs:
alwaysApply: false
---
