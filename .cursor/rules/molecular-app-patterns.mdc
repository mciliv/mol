# Molecular Visualization App Patterns

## Core Architecture
- **Frontend**: [app.js](mdc:app.js) - Main application logic with camera, photo upload, and 3D visualization
- **Backend**: [server.js](mdc:server.js) - Express server handling API endpoints and Python integration
- **Styling**: [style.css](mdc:style.css) - Minimal, "stupid simple" UI with no extraneous lines or outlining
- **HTML**: [index.html](mdc:index.html) - Main page structure with camera/photo mode switching

## Key Patterns

### UI/UX Guidelines
- **Minimal Design**: No extraneous lines, borders, shadows, or outlining - keep UI "stupid simple"
- **Dark Theme**: Consistent black background (#000000) across all components
- **Space-Filling**: Photo upload displays images in large, interactive containers similar to camera view
- **Interactive Elements**: Click-to-analyze functionality on both camera feed and uploaded images
- **Crosshair Indicators**: Visual feedback for clickable areas with consistent styling

### 3D Molecular Rendering
- **Library**: Use $3Dmol.js with sphere representation ONLY (NO ball-and-stick)
- **Van der Waals Radii**: Scale factor 0.8 for accurate molecular representation
- **Background**: Always black (#000000) for consistency
- **Column Layout**: New analysis results appear in columns to the right with individual close buttons

### Image Analysis Pipeline
- **Camera Mode**: Real-time video feed with click-to-analyze functionality
- **Photo Upload**: File upload and URL input with space-filling image display
- **Coordinate Handling**: Proper scaling between display and actual image resolution
- **Cropping Logic**: Extract regions around click points for focused analysis

### Backend Integration
- **API Structure**: Consistent JSON responses with `{ output: {...} }` format
- **Python Scripts**: [sdf.py](mdc:sdf.py) for SMILES-to-SDF conversion, [crystal.py](mdc:crystal.py) for mineral structures
- **Error Handling**: Graceful fallbacks for API failures and invalid inputs
- **File Management**: Robust filename lookup for SDF files with multiple fallback strategies

### Chemical Data Handling
- **SMILES Support**: Organic molecules via RDKit processing
- **Mineral Formulas**: Crystal structures (CaCO₃, SiO₂, etc.) via crystallographic data
- **Name Resolution**: Hardcoded aliases for common chemicals and minerals
- **3D Generation**: Automatic SDF file creation for both organic and inorganic compounds

### Development Workflow
- **Git Commits**: Always commit with descriptive messages after acceptance
- **Live Reload**: nodemon configuration for development efficiency
- **SSL Certificates**: Use existing certificates for HTTPS development
- **Debug Configuration**: Leverage VS Code's auto-attach debugging feature

### Code Style
- **Modern JavaScript**: ES6+ features, async/await, arrow functions
- **No Comments**: Avoid unless absolutely necessary for complex algorithms
- **Error Handling**: Proper try-catch blocks for all async operations
- **Mobile-First**: Consider touch events and mobile device constraints
description:
globs:
alwaysApply: false
---
