# Code Development Workflow

## Pre-Change Memory Check (MANDATORY)
Before ANY code changes:
1. **READ ui-memory.mdc** - check for previous fixes to same area
2. **Verify no conflicts** with documented permanent solutions  
3. **Update memory** if adding new persistent fixes

## Guidelines
No code comments
Don't create extraneous files
**NEVER revert documented permanent fixes** (see ui-memory.mdc)

## Workflow: Every Response
1. **Memory check** - consult relevant .mdc files
2. Check tests for accuracy
3. Pass all tests  
4. Run/refresh app
5. **Update memory bank** if new persistent issues discovered

## After Acceptance of Changes
```bash
# Immediate post-acceptance workflow:
git add .
git commit -m "Brief description of changes made"
git push origin main
git status  # Check remaining changes
```

## Development Server (MANDATORY)
**Always run in dedicated terminal after changes:**
```bash
./dev          # Standard development with live reload
./dev-debug    # Maximum error visibility and logging
```

**Live reload setup ensures:**
- Frontend changes auto-refresh browser
- Real-time error visibility  
- Proper certificate trust (run `./infrastructure/scripts/trust-cert.sh` once)

## Memory Preservation Strategy
**Problem**: AI context amnesia causes repeated fixes of same issues
**Solution**: Document-driven development with persistent .mdc memory

**Critical Memory Files**:
- `ui-memory.mdc` - UI fixes that keep getting forgotten
- `dev-mode.mdc` - Developer mode configuration  
- `meta.mdc` - System-wide configuration

**Before UI Changes**: ALWAYS read ui-memory.mdc first
**After UI Fixes**: Update memory if issue was recurring

## Testing Integration
Run tests non-blocking to ensure development server always starts
If tests fail, continue with server but investigate issues

Proceed with next feature or improvement while maintaining memory context 
```
Proceed with next feature or improvement
run in dedicated terminal after changes
making sure live reload is setup to refresh 