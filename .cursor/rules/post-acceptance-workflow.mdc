# Post-Acceptance Workflow

## Immediate Actions After Accepting Changes
1. **Commit Changes**: Always commit accepted changes to git
2. **Push to Remote**: Keep remote repository in sync
3. **Verify Status**: Check for any remaining uncommitted changes
4. **Test Changes**: Ensure functionality works as expected

## Standard Git Commands After Acceptance
```bash
# Stage all changes
git add .

# Commit with descriptive message
git commit -m "Brief description of what was changed"

# Push to remote repository
git push origin main

# Check status for remaining changes
git status
```

## Commit Message Guidelines
- Use present tense: "Add feature" not "Added feature"
- Be specific but concise
- Include context when helpful
- Examples:
  - "Add waves SVG for photo mode"
  - "Fix SMILES validation error"
  - "Update UI styling for mobile"
  - "Improve error handling in AI integration"

## Status Check Commands
```bash
# See what files are modified
git status

# See recent commits
git log --oneline -5

# See what changed in last commit
git show HEAD

# See unstaged changes
git diff
```

## If There Are Remaining Changes
- **Modified files**: Review and decide if they should be committed
- **Untracked files**: Add if they're part of the current work
- **Deleted files**: Confirm deletion is intentional
- **Conflicts**: Resolve any merge conflicts before proceeding

## Best Practices
- Commit frequently to maintain clean history
- Push regularly to avoid losing work
- Test changes before and after committing
- Use meaningful commit messages
- Keep commits focused on single changes when possible
description:
globs:
alwaysApply: false
---
