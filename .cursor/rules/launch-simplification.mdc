# Launch.json Simplification

## Problem: VS Code Launch Configuration Stalling
Original launch.json had complex configuration causing startup stalls:
- Pre-launch tasks (`dev-pipeline-setup`)  
- Post-debug cleanup tasks
- Complex environment variables (`DEBUG: "*"`, `PY_DEBUG: "1"`)
- Dependency tasks (`check-dependencies`, `cleanup-ports`)
- Restart configurations
- Compound configurations

## Solution: Nodemon Integration
```json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Start Server (Nodemon)",
      "type": "node",
      "request": "launch", 
      "program": "${workspaceFolder}/node_modules/.bin/nodemon",
      "args": [
        "--watch", "backend/",
        "--watch", "frontend/", 
        "--ext", "js,html,css",
        "--ignore", "node_modules/",
        "--ignore", "test/",
        "--delay", "1000ms",
        "backend/api/server.js"
      ],
      "console": "integratedTerminal",
      "skipFiles": ["<node_internals>/**"]
    },
    {
      "name": "Debug Server",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/api/server.js", 
      "console": "integratedTerminal",
      "runtimeArgs": ["--inspect-brk"],
      "skipFiles": ["<node_internals>/**"]
    }
  ]
}
```

## Changes Made
1. **Removed pre-launch tasks** - eliminated `dev-pipeline-setup` dependency
2. **Removed environment overrides** - let server use defaults  
3. **Removed restart/restart configs** - simplified debugging
4. **Removed compound configurations** - direct launch only
5. **Removed test runner config** - use `npm test` directly

## Result: Nodemon Integration with VS Code
- VS Code debugger launches nodemon with auto-reload
- Matches `./dev` script behavior exactly
- Server runs on default port 8080 with live reload
- Clean debug experience using existing infrastructure
