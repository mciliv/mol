# Molecular Visualization App - Core Architecture

## Project Overview
This is a molecular visualization app that uses AI to analyze objects from camera/photo input and generates 3D molecular structures. The app follows a "stupid simple" UI philosophy with no extraneous lines or outlining.

## Key Files
- [app.js](mdc:app.js) - Main frontend application with camera handling, UI interactions, and 3D molecular rendering
- [server.js](mdc:server.js) - Express.js backend with AI analysis and molecular processing routes
- [AtomPredictor.js](mdc:AtomPredictor.js) - AI analyzer module for image and text analysis using OpenAI Vision API
- [molecular-processor.js](mdc:molecular-processor.js) - Handles SMILES processing and SDF file generation using RDKit
- [index.html](mdc:index.html) - Main HTML template with UI structure
- [style.css](mdc:style.css) - Styling with dark theme and minimal design

## Core Technologies
- **Frontend**: Vanilla JavaScript with $3Dmol.js for molecular visualization
- **Backend**: Express.js with Python subprocess integration for RDKit
- **AI**: OpenAI Vision API for object identification and chemical analysis
- **3D Rendering**: Sphere representation only (NO ball-and-stick), van der Waals radii at 0.8 scale
- **UI**: Black background, minimal design, no borders or outlines

## Development Philosophy
- Keep UI "stupid simple" - no extraneous lines, borders, shadows, or outlining
- Focus on functionality over aesthetics
- Use modern JavaScript (ES6+, async/await)
- Implement proper error handling for all async operations
- Validate SMILES strings before processing
- Provide immediate user feedback for all interactions
description:
globs:
alwaysApply: false
---
