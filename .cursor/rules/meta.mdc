---
alwaysApply: true
---

# Meta Requirements - Living System

only respond in code
Act as a teacher. Show relevant code chunks if already exists

## Core Philosophy
Maximally simple & straightforward
Only generate rules in .mdc files, not markdown
Show code chunks rather than descriptions

## Auto-Generation Protocol
UI element mentioned â†’ Document specs + implementation
Recurring issue â†’ Create prevention rule
Architectural decision â†’ Add to system patterns

## UI Elements Registry

### Account/Payment System
- Credit card SVG icon (NOT user icon)
- `gap: 8px` on .account-link (CRITICAL)
- `margin-right: 160px` on .text-input (CRITICAL)
- Mobile: `margin-right: 80px`

### Developer Mode System  
- NO UI elements (terminal controlled only)
- `enableDevMode()` function in console
- Auto-enabled on localhost

### Error Handling
- Centralized error panel (top-right)
- Structured console logs with ðŸš¨ prefix
- `/api/log-error` endpoint for backend logging

## System Patterns
- Document-Driven Development prevents AI amnesia
- `.mdc` files with `alwaysApply: true` for critical fixes
- Memory preservation via persistent documentation
- Error reporting for AI & human readability

## Metrics
- UI Elements: 5 documented
- Auto-Generated .mdc Files: 4
- Fixed Issues: /analyze-text endpoint, card icon spacing

## Auto-Generation Triggers
```
IF (UI element mentioned) THEN â†’ Update meta.mdc â†’ Create rule if complex
IF (recurring issue) THEN â†’ Add prevention rule â†’ Reference in meta.mdc  
IF (architectural decision) THEN â†’ Document pattern â†’ Cross-reference
```
- Error reporting integration points (AUTO-GENERATED: error-reporting.mdc)

---

**This file continuously evolves - it's not just documentation, it's the living requirements brain of the project.**# Meta Requirements - Living System

Act as a teacher. Show relevant code if already exists

## Core Philosophy
Maximally simple & straightforward
Only generate rules in .mdc files, not markdown
Show code chunks rather than descriptions

## Auto-Generation Protocol
UI element mentioned â†’ Document specs + implementation
Recurring issue â†’ Create prevention rule
Architectural decision â†’ Add to system patterns

## UI Elements Registry

### Account/Payment System
- Credit card SVG icon (NOT user icon)
- `gap: 8px` on .account-link (CRITICAL)
- `margin-right: 160px` on .text-input (CRITICAL)
- Mobile: `margin-right: 80px`

### Developer Mode System  
- NO UI elements (terminal controlled only)
- `enableDevMode()` function in console
- Auto-enabled on localhost

### Error Handling
- Centralized error panel (top-right)
- Structured console logs with ðŸš¨ prefix
- `/api/log-error` endpoint for backend logging

## System Patterns
- Document-Driven Development prevents AI amnesia
- `.mdc` files with `alwaysApply: true` for critical fixes
- Memory preservation via persistent documentation
- Error reporting for AI & human readability

## Metrics
- UI Elements: 5 documented
- Auto-Generated .mdc Files: 4
- Fixed Issues: /analyze-text endpoint, card icon spacing

## Auto-Generation Triggers
```
IF (UI element mentioned) THEN â†’ Update meta.mdc â†’ Create rule if complex
IF (recurring issue) THEN â†’ Add prevention rule â†’ Reference in meta.mdc  
IF (architectural decision) THEN â†’ Document pattern â†’ Cross-reference
```
- Error reporting integration points (AUTO-GENERATED: error-reporting.mdc)

---

**This file continuously evolves - it's not just documentation, it's the living requirements brain of the project.**