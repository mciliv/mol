# AI Integration Patterns

## OpenAI Vision API Usage
- Handle OpenAI API connection errors gracefully
- Implement proper error handling for API rate limits and timeouts
- Use both full image and cropped region for enhanced analysis
- Prefer valid SMILES over molecular formulas in AI responses
- Provide fallback behavior when object identification fails

## Image Analysis Flow
- Accept base64 encoded images for processing
- Implement proper image cropping for targeted analysis
- Use relative coordinates for click/tap positions
- Handle mobile and desktop interaction patterns
- Provide immediate visual feedback for user interactions

## Text Analysis Patterns
- Validate object descriptions before sending to AI
- Handle both single molecule and batch responses
- Process chemical names and SMILES from AI responses
- Implement proper error handling for invalid responses
- Use descriptive names for molecular structures

## Response Processing
- Handle new chemicals structure with names and SMILES
- Process description responses for non-molecular objects
- Extract SMILES array from chemicals for 3D generation
- Validate AI responses before processing
- Implement proper fallbacks for failed analysis

## Error Handling Patterns
```javascript
// AI API calls
try {
  const result = await atomPredictor.analyzeImage(imageBase64, croppedImageBase64);
  if (!result || !result.chemicals) {
    throw new Error('Invalid AI response format');
  }
  return result;
} catch (error) {
  console.error('AI analysis failed:', error);
  throw new Error(`AI analysis failed: ${error.message}`);
}
```

## User Feedback
- Show immediate loading feedback for all AI operations
- Display cropped image regions for transparency
- Provide clear error messages for failed analysis
- Use descriptive titles for analysis results
- Implement proper loading states and indicators
description:
globs:
alwaysApply: false
---
