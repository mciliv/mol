# JavaScript Patterns for Molecular App

## Modern JavaScript Standards
- Use ES6+ features: arrow functions, destructuring, template literals, async/await
- Avoid comments unless absolutely necessary for complex algorithms
- Use meaningful variable names related to molecular concepts

## Error Handling Patterns
```javascript
// API calls
try {
  const response = await fetch('/api/endpoint');
  if (!response.ok) throw new Error(`HTTP ${response.status}`);
  const data = await response.json();
} catch (error) {
  console.error('Operation failed:', error);
}

// Python subprocess
try {
  const result = execSync('python script.py', { encoding: 'utf-8' });
} catch (error) {
  console.error('Python execution failed:', error.message);
}
```

## Event Handler Management
- Store event handlers as variables for re-attachment when DOM elements are recreated
- Use consistent naming: `photoUploadHandler`, `urlAnalyzeHandler`, etc.
- Always re-attach handlers after dynamic content updates

## Image Processing Patterns
- Use `object-fit: contain` for maintaining aspect ratios
- Scale coordinates properly between display and actual image resolution
- Implement both click and touch event handlers for mobile compatibility
- Store base64 data in `dataset` attributes for later use

## 3D Visualization Integration
- Always use sphere representation with van der Waals radii (scale: 0.8)
- Set black background (#000000) consistently
- Handle viewer cleanup and resize properly
- Use descriptive molecule names above 3D viewers

## Mobile-First Considerations
- Check for HTTPS requirements for camera API
- Implement touch event handlers alongside mouse events
- Use `-webkit-overflow-scrolling: touch` for smooth scrolling
- Consider mobile device constraints in UI design
description:
globs:
alwaysApply: false
---
