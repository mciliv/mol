#!/bin/bash

case "$1" in
  # Development
  "dev"|"start")
    echo "🧹 Cleaning up any existing development processes..."
    # Kill any existing node processes running our server
    pkill -f "node.*server.js" 2>/dev/null || true
    pkill -f "nodemon" 2>/dev/null || true
    
    # Wait a moment for cleanup
    sleep 1
    
    echo "🚀 Starting development server..."
    npx jest --testPathPattern=unit.test.js --verbose --silent && nodemon server.js
    ;;
  "server")
    echo "🧹 Cleaning up any existing server processes..."
    pkill -f "node.*server.js" 2>/dev/null || true
    sleep 1
    echo "🚀 Starting production server..."
    node server.js
    ;;
  "debug")
    echo "🧹 Cleaning up any existing debug processes..."
    pkill -f "node.*server.js" 2>/dev/null || true
    sleep 1
    echo "🐛 Starting server with debugger..."
    node --inspect server.js
    ;;
  "unsafe")
    echo "🧹 Cleaning up any existing processes..."
    pkill -f "node.*server.js" 2>/dev/null || true
    pkill -f "nodemon" 2>/dev/null || true
    sleep 1
    echo "🚀 Starting unsafe development server (no tests)..."
    nodemon server.js
    ;;
  
  # Testing
  "test")
    npx jest --testPathPattern=unit.test.js --verbose --silent && npx jest --testPathPattern=integration.test.js --verbose && npx jest --testPathPattern=system.test.js --verbose --detectOpenHandles
    ;;
  "unit")
    npx jest --testPathPattern=unit.test.js --verbose --silent
    ;;
  "integration")
    npx jest --testPathPattern=integration.test.js --verbose
    ;;
  "system")
    npx jest --testPathPattern=system.test.js --verbose --detectOpenHandles
    ;;
  "watch")
    npx jest --watch
    ;;
  "pytest")
    python -m pytest tests/ -v
    ;;
  "pytest:debug")
    python -m debugpy --listen 5678 --wait-for-client -m pytest tests/ -v -s
    ;;
  "fixtures")
    npx jest --testPathPattern=tests/fixtures
    ;;
  
  # Deployment & Shipping
  "ship")
    echo "🚢 Starting complete workflow (ship)..."
    
    # Check for required environment variable
    if [ -z "$OPENAI_API_KEY" ]; then
      echo "❌ OPENAI_API_KEY environment variable is required"
      exit 1
    fi
    
    # Stage all changes
    echo "📝 Staging all changes..."
    git add .
    
    # Commit with timestamp
    timestamp=$(date)
    commit_message="Auto-commit before production deployment - $timestamp"
    echo "💾 Committing changes..."
    git commit -m "$commit_message"
    
    # Run pre-deployment tests
    echo "🧪 Running pre-deployment tests..."
    npx jest --testPathPattern=unit.test.js --verbose --silent && npx jest --testPathPattern=integration.test.js --verbose && npx jest --testPathPattern=system.test.js --verbose --detectOpenHandles && python -m pytest tests/ -v
    
    if [ $? -ne 0 ]; then
      echo "❌ Tests failed - aborting deployment"
      exit 1
    fi
    
    # Deploy to Google Cloud Functions
    echo "☁️  Deploying to Google Cloud Functions..."
    gcloud functions deploy molecular-analysis --gen2 --runtime nodejs20 --trigger-http --allow-unauthenticated --memory 1GB --timeout 540s --region us-central1 --entry-point molecularAnalysis --source . --set-env-vars OPENAI_API_KEY=$OPENAI_API_KEY --quiet
    
    if [ $? -ne 0 ]; then
      echo "❌ Deployment failed"
      exit 1
    fi
    
    # Push to git repository
    echo "📤 Pushing to git repository..."
    git push
    
    echo "✅ Complete workflow successful!"
    echo "🌐 Function deployed to Google Cloud Functions"
    ;;
  "deploy")
    npx jest --testPathPattern=unit.test.js --verbose --silent && npx jest --testPathPattern=integration.test.js --verbose && npx jest --testPathPattern=system.test.js --verbose --detectOpenHandles && python -m pytest tests/ -v && gcloud functions deploy molecular-analysis --runtime nodejs20 --trigger-http --allow-unauthenticated --memory 1GB --timeout 540s --entry-point molecularAnalysis --source .
    ;;
  "deploy:now")
    npx jest --testPathPattern=unit.test.js --verbose --silent && npx jest --testPathPattern=integration.test.js --verbose && npx jest --testPathPattern=system.test.js --verbose --detectOpenHandles && python -m pytest tests/ -v && gcloud functions deploy molecular-analysis --gen2 --runtime nodejs20 --trigger-http --allow-unauthenticated --memory 1GB --timeout 540s --region us-central1 --entry-point molecularAnalysis --source . --set-env-vars OPENAI_API_KEY=$OPENAI_API_KEY --quiet
    ;;
  
  # Utilities
  "cleanup")
    echo "🧹 Cleaning up all development processes and ports..."
    pkill -f "node.*server.js" 2>/dev/null || true
    pkill -f "nodemon" 2>/dev/null || true
    
    # Try to free up the common ports
    if command -v lsof >/dev/null 2>&1; then
      for port in 8080 3001 35729; do
        pids=$(lsof -ti:$port 2>/dev/null || true)
        if [ ! -z "$pids" ]; then
          echo "🔄 Freeing port $port (PIDs: $pids)..."
          echo "$pids" | xargs kill -9 2>/dev/null || true
        fi
      done
    fi
    
    echo "✅ Cleanup complete. You can now restart the server."
    ;;
  
  # Help
  *)
    echo "Usage: ./run [command]"
    echo ""
    echo "Development:"
    echo "  dev, start    Run tests and start development server with nodemon"
    echo "  server        Start production server"
    echo "  debug         Start server with debugger"
    echo "  unsafe        Start development server without tests"
    echo "  cleanup       Clean up all processes and free ports"
    echo ""
    echo "Testing:"
    echo "  test          Run all test suites (unit, integration, system, python)"
    echo "  unit          Run unit tests only"
    echo "  integration   Run integration tests only"
    echo "  system        Run system tests only"
    echo "  watch         Run tests in watch mode"
    echo "  pytest        Run Python tests"
    echo "  pytest:debug  Run Python tests with debugger"
    echo "  fixtures      Run fixture tests"
    echo ""
    echo "Deployment:"
    echo "  ship          Complete workflow: commit, test, deploy, push"
    echo "  deploy        Deploy to Google Cloud Functions (legacy)"
    echo "  deploy:now    Deploy to Google Cloud Functions (gen2)"
    ;;
esac 